{"version":3,"sources":["api/api.ts","component/common/theme/theme.ts","component/song/QuerySongForm.tsx","component/common/modal/ModalForm.tsx","component/song/SongTableRow.tsx","component/song/SongTable.tsx","component/utils/helper.ts","component/song/AddSongFormik.tsx","component/pages/SongPage.tsx","component/pages/NotFoundPage.tsx","component/author/AuthorTableRow.tsx","component/author/AuthorTable.tsx","component/author/QueryAuthorForm.tsx","component/author/AddAuthorForm.tsx","component/pages/AuthorPage.tsx","component/router/Routes.tsx","component/header/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["instance","axios","create","songsAPI","songObject","post","uuid","delete","updateObject","put","queryObject","get","authorsAPI","authorObject","updateAuthorObject","muiTheme","createTheme","overrides","MuiCssBaseline","body","background","backgroundRepeat","backgroundAttachment","MuiButton","root","fontSize","color","fontFamily","fontWeight","fontStyle","lineHeight","borderRadius","textTransform","padding","MuiCard","backgroundColor","MuiLink","MuiTextField","MuiInput","typography","h1","h2","h3","body1","opacity","join","palette","primary","light","main","dark","secondary","error","warning","info","text","useStyles","makeStyles","theme","createStyles","rootGrid","flexGrow","formButtonBlock","display","alignItems","filterHeader","marginBottom","formControl","margin","spacing","minWidth","maxWidth","search","searchInputBlock","flexDirection","addDeckBlock","marginLeft","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","QuerySongForm","props","handleSubmitCallBack","classes","useState","songTitle","setSongTitle","React","createdAt","setCreatedAt","authorName","setAuthorName","offset","setOffset","limit","setLimit","checkedAuthorList","setCheckedAuthorList","checkboxAuthorList","setCheckboxAuthorList","useEffect","undefined","then","res","data","catch","err","console","log","Grid","container","direction","justifyContent","item","className","Typography","variant","TextField","value","size","label","placeholder","onChange","event","target","type","InputLabelProps","shrink","FormControl","InputLabel","id","Select","labelId","multiple","input","Input","map","author","MenuItem","name","personName","indexOf","fontWeightRegular","fontWeightMedium","Button","onClick","querySongObject","params","isFinite","Number","createdAtSong","length","authorList","marginTop","childrenBlock","actionBlock","ModalForm","openStatus","handleCloseModal","modalActionCallback","modalTitle","modalText","actionButtonTitle","children","removeActionBlock","handleClose","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","SongTableRow","song","handleDeleteCallback","handleUpdateCallback","authorArray","modalEditStatus","setModalEditStatus","title","setTitle","duration","setDuration","authorUuid","setAuthorUuid","TableRow","TableCell","component","scope","align","moment","format","songUuid","updatedObject","handleEditSong","fullWidth","test","htmlFor","NativeSelect","SongTable","songArray","TableContainer","Paper","Table","TableHead","TableBody","showMessage","message","showTime","messageType","setError","setTimeout","textAlign","formTitle","formSubtitle","formDescription","textFieldArea","addAuthorField","displayStretch","AddAuthorForm","handleAddSong","addSongSchema","Yup","shape","required","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","handleSubmit","FormGroup","handleChange","touched","Boolean","errors","helperText","aria-label","FormHelperText","paper","filterBlock","mainBlock","boxSizing","mainSearchBlock","mainSearchHeader","SongPage","setSongArray","setAuthorArray","getAllSongs","a","response","getAllAuthors","elevation","square","Alert","severity","AddSongFormik","NotFoundPage","AuthorTableRow","setName","setLabel","handleEditAuthor","AuthorTable","QueryAuthorForm","handleAddAuthor","restoreSchema","getFieldProps","AuthorPage","PATH","Routes","path","render","exact","from","to","toolbar","listBlock","iconBlock","menuItem","Header","history","useHistory","AppBar","position","Toolbar","push","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.9ce42d91.chunk.js","sourcesContent":["import axios from 'axios'\n\n/*const instance = axios.create({\n    baseURL: 'http://localhost:3001/',\n})*/\nconst instance = axios.create({\n    /*baseURL: 'http://localhost:3001/',*/\n})\n\n/**\n * Songs API object type\n * */\n\nexport interface AddSongObjectType {\n    title: string\n    duration?: number\n    authorUuid: string\n}\n\nexport interface SongUpdateObjectType {\n    title?: string | null\n    duration?: number | null\n    authorUuid?: string | null\n}\n\nexport interface SongQueryObjectType {\n    params?: {\n        songTitle?: string\n        authorName?: string\n        limit?: number\n        offset?: number\n        createdAtSong?: string\n        authorList?: Array<string>\n    }\n}\n\n/**\n * Authors API object type\n * */\n\nexport interface NewAuthorObjectType {\n    name: string\n    label: string\n    /*birthday: string*/\n}\nexport interface UpdateAuthorObjectType {\n    name?: string\n    label?: string\n    /*birthday: string*/\n}\n\n\nexport interface QueryAuthorsObjectType {\n    params?: {\n        authorList?: Array<string>\n        authorName?: string\n        songTitle?: string\n        createdAtAuthor?: string\n        limit?: number\n        offset?: number\n    }\n}\n\nexport const songsAPI = {\n    addSong(songObject: AddSongObjectType) {\n        return instance.post<any>(\"/api/songs\", songObject);\n    },\n    deleteSong(uuid: string) {\n        return instance.delete<any>(`/api/songs/${uuid}`);\n    },\n    updateSong(uuid: string, updateObject: SongUpdateObjectType) {\n        return instance.put<any>(`/api/songs/${uuid}`, updateObject);\n    },\n    getAllSong(queryObject?: SongQueryObjectType) {\n        return instance.get<any>(\"/api/songs\", queryObject);\n    },\n    getSongByID(uuid: string) {\n        return instance.get<any>(\"/api/songs\", {params: {uuid}});\n    },\n}\n\nexport const authorsAPI = {\n    addAuthor(authorObject: NewAuthorObjectType) {\n        return instance.post<any>(\"/api/authors\", authorObject);\n    },\n    deleteAuthor(uuid: string) {\n        return instance.delete<any>(`/api/authors/${uuid}`);\n    },\n    updateAuthor(uuid: string, updateAuthorObject: UpdateAuthorObjectType) {\n        return instance.put<any>(`/api/authors/${uuid}`, updateAuthorObject);\n    },\n    getAllAuthor(queryObject?: QueryAuthorsObjectType) {\n        return instance.get<any>(\"/api/authors\", queryObject);\n    },\n    getAuthorByID(uuid: string) {\n        return instance.get<any>(`/api/authors/${uuid}`);\n    },\n}\n\n\n\n\n","import {createTheme} from \"@material-ui/core\";\n\nexport const muiTheme = createTheme({\n    overrides: {\n        MuiCssBaseline: {\n            '@global': {\n                body: {\n                    background: 'linear-gradient(to bottom, #EBE0E9 30%, #9A91C8 90%)',\n                    backgroundRepeat: \"no-repeat\",\n                    backgroundAttachment: \"fixed\",\n                },\n            },\n        },\n\n        MuiButton: {\n            root: {\n                fontSize: '16px',\n                color: \"#21268F\",\n                fontFamily: 'SF UI Display, sans-serif',\n                fontWeight: 500,\n                fontStyle: \"normal\",\n                lineHeight: \"19px\",\n                borderRadius: \"30px\",\n                textTransform: \"none\",\n                padding: \"8px 16px\",\n            },\n        },\n        MuiCard: {\n            root: {\n                borderRadius : \"8px\",\n                backgroundColor : \"#F9F9FE\",\n            }\n        },\n        MuiLink: {\n            root : {\n                fontSize: '16px',\n                color: \"#21268F\",\n                fontFamily: 'SF UI Display, sans-serif',\n                fontWeight: 600,\n                fontStyle: \"normal\",\n                lineHeight: \"24px\",\n                borderRadius: \"30px\",\n            }\n        },\n        MuiTextField : {\n            root : {\n                fontWeight: 600,\n                fontFamily: 'SF UI Display, sans-serif',\n                fontStyle: \"normal\",\n                fontSize: \"16px\",\n                lineHeight: \"24px\",\n                color: \"#2D2E46\",\n            }\n        },\n        MuiInput : {\n            root : {\n                fontWeight: 300,\n                fontFamily: 'SF UI Display, sans-serif',\n                fontStyle: \"normal\",\n                fontSize: \"16px\",\n                lineHeight: \"24px\",\n                color: \"#2D2E46\",\n            }\n        }\n    },\n\n    typography: {\n        // Use the system font instead of the default Roboto font.\n        h1: {\n            fontWeight: 600,\n            fontStyle: \"normal\",\n            fontSize: \"26px\",\n            lineHeight: \"39px\",\n            fontFamily: \"Poppins\",\n            color: \"#2D2E46\",\n        },\n        h2: {\n            fontWeight: 600,\n            fontStyle: \"normal\",\n            fontSize: \"22px\",\n            lineHeight: \"33px\",\n            fontFamily: \"Poppins\",\n            color: \"#2D2E46\",\n        },\n        h3: {\n            fontWeight: 600,\n            fontStyle: \"normal\",\n            fontSize: \"16px\",\n            lineHeight: \"19px\",\n            fontFamily: 'SF UI Display, sans-serif',\n            color: \"#2D2E46\",\n        },\n        body1: {\n            fontWeight: 300,\n            fontStyle: \"normal\",\n            fontSize: \"16px\",\n            lineHeight: \"24px\",\n            fontFamily: 'SF UI Display, sans-serif',\n            color: \"#2D2E46\",\n            opacity: 0.6,\n        },\n        fontFamily: [\n            'Poppins',\n            'SF UI Display, sans-serif',\n            'Roboto',\n            '\"Helvetica Neue\"',\n            'Arial',\n            'sans-serif',\n        ].join(','),\n    },\n    palette: {\n        primary: {\n            light: '#b8f04a',\n            main: '#21268F',\n            dark: '#2D2E46'\n        },\n        secondary: {\n            light: '#e35ba2',\n            main: '#21268F',\n            dark: '#21268F'\n        },\n        error: {\n            main: '#ae2573',\n        },\n        warning: {\n            main: '#ffa500'\n        },\n        info: {\n            main: '#009cde',\n        },\n        text: {\n            primary: '#666666',\n            secondary: '#b3b3b3',\n        },\n    },\n});\n","import React, {useEffect, useState} from 'react';\nimport {makeStyles, createStyles, Theme} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {Button, FormControl, Input, InputLabel, MenuItem, Select} from \"@material-ui/core\";\nimport {muiTheme} from \"../common/theme/theme\";\nimport {AuthorType} from \"./AddSongForm\";\nimport {authorsAPI, SongQueryObjectType} from \"../../api/api\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        rootGrid: {\n            flexGrow: 1,\n        },\n        formButtonBlock: {\n            display: \"flex\",\n            alignItems: \"center\",\n        },\n        filterHeader: {\n            marginBottom: \"20px\",\n        },\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n            maxWidth: 190,\n        },\n        search: {\n            display: \"flex\",\n            alignItems: \"stretch\",\n            backgroundColor: \"#e2dfef\",\n            marginBottom: \"15px\",\n        },\n        searchInputBlock: {\n            flexDirection: \"column\",\n            flexGrow: 3,\n        },\n        addDeckBlock: {\n            marginLeft: \"20px\",\n        }\n    }),\n);\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 190,\n        },\n    },\n};\n\nfunction getStyles(name: string, personName: string[], theme: Theme) {\n    return {\n        fontWeight:\n            personName.indexOf(name) === -1\n                ? theme.typography.fontWeightRegular\n                : theme.typography.fontWeightMedium,\n    };\n}\n\nexport interface QuerySongFormPropsType {\n    handleSubmitCallBack: (songQueryObject: SongQueryObjectType) => void\n}\n\nexport const QuerySongForm: React.FC<QuerySongFormPropsType> = (props) => {\n    const {handleSubmitCallBack} = props\n\n    const classes = useStyles();\n\n    const [songTitle, setSongTitle] = useState<string>('');\n    const [createdAt, setCreatedAt] = React.useState<string>('');\n    const [authorName, setAuthorName] = useState<string>('');\n    const [offset, setOffset] = useState<string>('');\n    const [limit, setLimit] = useState<string>('');\n    const [checkedAuthorList, setCheckedAuthorList] = useState<Array<string>>([]);\n    const [checkboxAuthorList, setCheckboxAuthorList] = useState<Array<AuthorType>>([]);\n\n    useEffect(() => {\n        authorsAPI.getAllAuthor(undefined)\n            .then(res => {\n                setCheckboxAuthorList(res.data);\n\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }, [])\n\n    const handleSongTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setSongTitle(event.target.value)\n    }\n    const handleAuthorNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setAuthorName(event.target.value)\n    }\n    const handleCreatedAt = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCreatedAt(event.target.value);\n    };\n\n    const handleOffset = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let value = event.target.value\n        setOffset(value);\n    }\n    const handleLimit = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let value = event.target.value\n        setLimit(value)\n    }\n\n    const handleAuthorListChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setCheckedAuthorList(event.target.value as string[]);\n\n    };\n\n    const handleSubmit = () => {\n        const querySongObject : SongQueryObjectType = {\n            params: {\n                ...(songTitle !== '' && {\n                    songTitle\n                }),\n                ...(authorName !== '' && {\n                    authorName\n                }),\n                ...((limit !== '' && isFinite(+limit)) && {\n                    limit: Number(limit)\n                }),\n                ...((offset !== '' && isFinite(+offset)) && {\n                    offset: Number(offset)\n                }),\n                ...(createdAt !== '' && {\n                    createdAtSong: createdAt\n                }),\n                ...(checkedAuthorList.length > 0 && {\n                    authorList: checkedAuthorList\n                }),\n            }\n        }\n        handleSubmitCallBack && handleSubmitCallBack(querySongObject)\n    }\n\n    return (\n        <div>\n            <Grid\n                container\n                direction=\"row\"\n                justifyContent=\"flex-start\"\n                alignItems=\"stretch\"\n            >\n                <Grid\n                    item\n                    className={classes.searchInputBlock}\n                >\n                    <Typography\n                        variant={\"h2\"}\n                        className={classes.filterHeader}\n                    >\n                        Filter songs\n                    </Typography>\n                    <TextField\n                        value={songTitle}\n                        size={\"small\"}\n                        className={classes.search}\n                        style={{backgroundColor: \"#ECECF9\"}}\n                        label=\"Song title\"\n                        placeholder=\"Song title\"\n                        variant=\"outlined\"\n                        onChange={handleSongTitleChange}\n                    />\n                    <TextField\n                        value={authorName}\n                        size={\"small\"}\n                        className={classes.search}\n                        style={{backgroundColor: \"#ECECF9\"}}\n                        label=\"Author name\"\n                        placeholder=\"Song name\"\n                        variant=\"outlined\"\n                        onChange={handleAuthorNameChange}\n                    />\n                    <TextField\n                        value={offset}\n                        size={\"small\"}\n                        className={classes.search}\n                        style={{backgroundColor: \"#ECECF9\"}}\n                        label=\"Offset\"\n                        placeholder=\"offset\"\n                        variant=\"outlined\"\n                        onChange={handleOffset}\n                    />\n                    <TextField\n                        value={limit}\n                        size={\"small\"}\n                        className={classes.search}\n                        style={{backgroundColor: \"#ECECF9\"}}\n                        label=\"set limit\"\n                        placeholder=\"set limit\"\n                        variant=\"outlined\"\n                        onChange={handleLimit}\n                    />\n                    <TextField\n                        value={createdAt}\n                        size={\"small\"}\n                        className={classes.search}\n                        style={{backgroundColor: \"#ECECF9\"}}\n                        label=\"createdAt\"\n                        type=\"date\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        onChange={handleCreatedAt}\n                    />\n                    <FormControl className={classes.formControl}>\n                        <InputLabel id=\"demo-mutiple-name-label\">Name</InputLabel>\n                        <Select\n                            labelId=\"demo-mutiple-name-label\"\n                            id=\"demo-mutiple-name\"\n                            multiple\n                            value={checkedAuthorList}\n                            onChange={handleAuthorListChange}\n                            input={<Input/>}\n                            MenuProps={MenuProps}\n                        >\n                            {checkboxAuthorList.map((author) => (\n                                <MenuItem\n                                    key={author.uuid}\n                                    value={author.uuid}\n                                    style={getStyles(author.name, checkedAuthorList, muiTheme)}\n                                >\n                                    {author.name}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                    <Button\n                        type={'submit'}\n                        variant={'contained'}\n                        className={classes.formButtonBlock}\n                        color={'primary'}\n                        onClick={handleSubmit}\n                    >\n                        Search\n                    </Button>\n                </Grid>\n            </Grid>\n        </div>\n    );\n};\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {Typography} from \"@material-ui/core\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\nexport interface ModalPropsType {\n    modalTitle: string\n    modalText?: string\n    openStatus: boolean\n    handleCloseModal: (openStatus: boolean) => void\n    modalActionCallback?: () => void\n    actionButtonTitle: string\n    children?: JSX.Element\n    closeAfterAction?: boolean\n    removeActionBlock?: boolean\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n            width: \"400px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            marginBottom: \"25px\",\n            marginTop: \"20px\",\n        },\n        childrenBlock: {\n            width: \"85%\",\n        },\n        actionBlock: {\n            marginTop: \"15px\",\n        }\n    }),\n);\n\nconst ModalForm: React.FC<ModalPropsType> = (props) => {\n\n    const classes = useStyles();\n    const {\n        openStatus, handleCloseModal,\n        modalActionCallback, modalTitle, modalText,\n        actionButtonTitle, children, removeActionBlock\n    } = props\n\n    const handleClose = () => {\n        handleCloseModal && handleCloseModal(false)\n    };\n    const handleAction = () => {\n        modalActionCallback && modalActionCallback();\n        handleCloseModal && handleCloseModal(false)\n    }\n\n    return (\n        <div>\n            <Dialog\n                open={openStatus}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <div className={classes.root}>\n                    {\n                        modalTitle && <DialogTitle id=\"alert-dialog-title\">{modalTitle}</DialogTitle>\n                    }\n                    {\n                        modalText &&\n                        <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">\n                                <Typography variant={\"body1\"}>{modalText}</Typography>\n                            </DialogContentText>\n                        </DialogContent>\n                    }\n                    {\n                        children && <div className={classes.childrenBlock}>\n                            {children}\n                        </div>\n                    }\n                    {\n                        !removeActionBlock && (<div className={classes.actionBlock}><DialogActions>\n                            <Button onClick={handleClose} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={handleAction} color=\"primary\" autoFocus>\n                                {actionButtonTitle}\n                            </Button>\n                        </DialogActions></div>)\n                    }\n                </div>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default ModalForm","import React, {useState} from 'react'\nimport {Button, FormControl, Input, InputLabel, NativeSelect, TableCell, TableRow, TextField} from \"@material-ui/core\";\nimport moment from \"moment\";\nimport ModalForm from \"../common/modal/ModalForm\";\nimport {SongType} from \"../pages/SongPage\";\nimport {SongUpdateObjectType} from \"../../api/api\";\nimport {AuthorType} from \"./AddSongForm\";\n\n\nexport interface SongTableRowPropsType {\n    song: SongType\n    authorArray: Array<AuthorType>\n    handleDeleteCallback: (uuid: string) => void\n    handleUpdateCallback: (uuid: string, updatedObject: SongUpdateObjectType) => void\n}\n\n\nexport const SongTableRow: React.FC<SongTableRowPropsType> = (props) => {\n\n    const {song, handleDeleteCallback, handleUpdateCallback, authorArray} = props;\n\n    const [modalEditStatus, setModalEditStatus] = useState(false);\n    const [title, setTitle] = useState<string>(song.title);\n    const [duration, setDuration] = useState<number>(song.duration);\n    const [authorUuid, setAuthorUuid] = useState<string>(song.author.uuid);\n\n    const handleEditSong = (songUuid: string) => {\n        const updatedObject: SongUpdateObjectType = {\n            ...(title !== '' && {\n                title\n            }),\n            ...((duration && isFinite(+duration)) && {\n                duration: Number(duration)\n            }),\n            ...(authorUuid !== '' && {\n                authorUuid\n            }),\n        }\n        handleUpdateCallback && handleUpdateCallback(songUuid, updatedObject);\n    }\n\n    const handleTitleUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.target.value)\n    }\n\n    const handleDurationUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (/\\D+/.test(event.target.value)) return;\n        setDuration(Number(+event.target.value));\n    }\n\n    const handleAuthorCheckBoxChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setAuthorUuid(event.target.value as string);\n    };\n\n    return (\n        <TableRow\n            key={song.uuid}\n        >\n            <TableCell component=\"th\" scope=\"row\">\n                {song.title}\n            </TableCell>\n            <TableCell align=\"right\">{song.author && song.author.name}</TableCell>\n            <TableCell align=\"right\">{song.duration}</TableCell>\n            <TableCell align=\"right\">{moment(song.createdAt).format(\"DD.MM.YYYY\")}</TableCell>\n            <TableCell align=\"right\">\n                <Button\n                    type={'submit'}\n                    variant={'contained'}\n                    onClick={() => {\n                        handleDeleteCallback && handleDeleteCallback(song.uuid)\n                    }}\n                    color={'primary'}>\n                    Delete\n                </Button>\n                <Button\n                    type={'submit'}\n                    variant={'contained'}\n                    onClick={() => {\n                        setModalEditStatus(true)\n                    }}\n                    color={'primary'}>\n                    Update\n                </Button>\n                <ModalForm\n                    modalTitle={\"Edit song\"}\n                    actionButtonTitle={\"Edit\"}\n                    openStatus={modalEditStatus}\n                    handleCloseModal={setModalEditStatus}\n                    modalActionCallback={() => {\n                        handleEditSong(song.uuid)\n                    }}\n                >\n                    <>\n                        <TextField\n                            value={title === null ? song.title : title}\n                            onChange={handleTitleUpdate}\n                            margin=\"dense\"\n                            label=\"Title\"\n                            type=\"string\"\n                            fullWidth\n                        />\n                        <TextField\n                            value={duration === null ? song.duration : duration}\n                            onChange={handleDurationUpdate}\n                            margin=\"dense\"\n                            label=\"Duration\"\n                            type=\"string\"\n                            fullWidth\n                        />\n                        <FormControl>\n                            <InputLabel htmlFor=\"demo-customized-select-native\">Author</InputLabel>\n                            <NativeSelect\n                                placeholder={\"Author\"}\n                                value={authorUuid}\n                                onChange={handleAuthorCheckBoxChange}\n                                input={<Input/>}\n                            >\n                                {\n                                    authorArray && authorArray.map(author => {\n                                        return <option key={author.uuid} value={author.uuid}>{author.name}</option>\n                                    })\n                                }\n                            </NativeSelect>\n                        </FormControl>\n                    </>\n                </ModalForm>\n            </TableCell>\n        </TableRow>\n    )\n}\nexport default SongTableRow\n","import React from 'react';\nimport {\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n} from \"@material-ui/core\";\nimport {SongType} from \"../pages/SongPage\";\nimport {SongUpdateObjectType} from \"../../api/api\";\nimport {AuthorType} from \"./AddSongForm\";\nimport SongTableRow from \"./SongTableRow\";\n\n\nexport interface SongTablePropsType {\n    songArray: Array<SongType>\n    authorArray: Array<AuthorType>\n    handleDeleteCallback: (uuid: string) => void\n    handleUpdateCallback: (uuid: string, updatedObject: SongUpdateObjectType) => void\n}\n\n\nconst SongTable: React.FC<SongTablePropsType> = (props) => {\n\n    const {songArray, handleDeleteCallback, handleUpdateCallback, authorArray} = props;\n\n    return (\n        <TableContainer component={Paper}>\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Title</TableCell>\n                        <TableCell align=\"right\">Author</TableCell>\n                        <TableCell align=\"right\">Duration</TableCell>\n                        <TableCell align=\"right\">CreatedAt</TableCell>\n                        <TableCell align=\"right\">Action</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {songArray && songArray.map((song) => (\n                        <SongTableRow\n                            key={song.uuid}\n                            song={song}\n                            handleDeleteCallback={handleDeleteCallback}\n                            handleUpdateCallback={handleUpdateCallback}\n                            authorArray={authorArray}\n                        />\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n\n\nexport default SongTable;","export type ColorType = \"error\" | \"warning\" | \"info\" | \"success\"\n\nexport type ErrorMessageObjectType = {\n    message : string\n    messageType : ColorType | undefined\n}\n\nexport const showMessage = (message: string, showTime: number, messageType: ColorType, setError : Function) => {\n    let messageObject : ErrorMessageObjectType = {\n        message , messageType\n    };\n    setError && setError(messageObject);\n    setTimeout(() => {\n        setError(undefined);\n    }, showTime)\n}","import React from 'react'\nimport {useFormik} from \"formik\";\nimport * as Yup from 'yup';\nimport {\n    Button, createStyles, FormControl, FormGroup, FormHelperText,\n    Grid, Input, makeStyles, NativeSelect, TextField, Theme,\n} from \"@material-ui/core\";\nimport {AddSongObjectType} from \"../../api/api\";\nimport {AuthorType} from \"./AddSongForm\";\n\n\nconst useStyles = makeStyles<Theme>(theme => createStyles({\n    root: {\n        textAlign: \"center\",\n        padding: \"30px 30px\",\n        width: \"413px\",\n    },\n    formTitle: {\n        marginBottom: \"30px\",\n    },\n    formSubtitle: {\n        marginBottom: \"40px\",\n    },\n    formDescription: {\n        marginBottom: \"40px\",\n    },\n    formButtonBlock: {\n        marginTop: \"15px\",\n    },\n    textFieldArea: {\n        margin: \"0px 10px\",\n        display: \"flex\"\n    },\n    addAuthorField: {\n        flexGrow: 1,\n    },\n    displayStretch: {\n        display: \"flex\",\n        alignItems: \"stretch\"\n    },\n}))\n\nexport interface AddSongFormikPropsType {\n    handleAddSong: (authorObject: AddSongObjectType) => void\n    handleCloseModal?: (openStatus: boolean) => void\n    authorArray: AuthorType[]\n}\n\nconst AddAuthorForm: React.FC<AddSongFormikPropsType> = (props) => {\n    const {handleAddSong, handleCloseModal, authorArray} = props;\n    const classes = useStyles()\n\n    const addSongSchema = Yup.object().shape({\n        title: Yup.string().required('Name is required'),\n        duration: Yup.number(),\n        authorUuid: Yup.string().required('Please choose Author field')\n\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            title: '',\n            duration: 0,\n            authorUuid: '',\n        },\n        validationSchema: addSongSchema,\n        onSubmit: (values) => {\n            const authorObject: AddSongObjectType = {\n                title: values.title,\n                duration: values.duration,\n                authorUuid: values.authorUuid\n            }\n            handleCloseModal && handleCloseModal(false);\n            handleAddSong && handleAddSong(authorObject);\n            formik.resetForm();\n        },\n    })\n\n    return (\n        <Grid>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl className={classes.displayStretch}>\n                    <FormGroup className={classes.textFieldArea}>\n                        <TextField\n                            name={\"title\"}\n                            type=\"text\"\n                            label=\"Title\"\n                            margin=\"dense\"\n                            value={formik.values.title}\n                            onChange={formik.handleChange}\n                            error={formik.touched.title && Boolean(formik.errors.title)}\n                            helperText={formik.touched.title && formik.errors.title}\n                        />\n                        <TextField\n                            name={\"duration\"}\n                            type=\"text\"\n                            label=\"Duration\"\n                            margin=\"dense\"\n                            value={formik.values.duration}\n                            onChange={formik.handleChange}\n                            error={formik.touched.duration && Boolean(formik.errors.duration)}\n                            helperText={formik.touched.duration && formik.errors.duration}\n                        />\n                        <FormControl>\n                            <NativeSelect\n                                name={\"authorUuid\"}\n                                aria-label={\"Author\"}\n                                placeholder={\"Author\"}\n                                input={<Input/>}\n                                value={formik.values.authorUuid}\n                                onChange={formik.handleChange}\n                                error={formik.touched.authorUuid && Boolean(formik.errors.authorUuid)}\n                            >\n                                <option value={\"\"}>{\"--Choose Author\"}</option>\n                                {\n                                    authorArray && authorArray.map(author => {\n                                        return <option key={author.uuid} value={author.uuid}>{author.name}</option>\n                                    })\n                                }\n                            </NativeSelect>\n                        </FormControl>\n                        <FormHelperText>{formik.touched.authorUuid && formik.errors.authorUuid}</FormHelperText>\n                        <div className={classes.formButtonBlock}>\n                            <Button\n                                type={'submit'}\n                                variant={'contained'}\n                                className={classes.formButtonBlock}\n                                color={'primary'}>\n                                Add Song\n                            </Button>\n                        </div>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    )\n}\nexport default AddAuthorForm\n","import React, {useEffect, useState} from 'react';\nimport { AuthorType as AuthorResponseType} from \"../song/AddSongForm\";\nimport {AddSongObjectType, authorsAPI, SongQueryObjectType, songsAPI, SongUpdateObjectType} from \"../../api/api\";\nimport {makeStyles} from '@material-ui/core/styles';\nimport {QuerySongForm} from \"../song/QuerySongForm\";\nimport {Button, Paper} from \"@material-ui/core\";\nimport Grid from '@material-ui/core/Grid';\nimport Typography from \"@material-ui/core/Typography\";\nimport SongTable from '../song/SongTable';\nimport {ErrorMessageObjectType, showMessage} from \"../utils/helper\";\nimport {Alert} from \"@material-ui/lab\";\nimport ModalForm from \"../common/modal/ModalForm\";\nimport AddSongFormik from \"../song/AddSongFormik\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        marginTop: \"40px\",\n        marginBottom: \"40px\",\n        minWidth: 750,\n    },\n    paper: {\n        margin: 'auto',\n        maxWidth: 1200,\n    },\n    filterBlock: {\n        backgroundColor: \"#ECECF9\",\n        maxWidth: \"250px\",\n        padding: \"30px\",\n        flexGrow: 1,\n    },\n    mainBlock: {\n        width: \"fit-content\",\n        flexGrow: 3,\n        margin: \"30px\",\n        maxWidth: \"950px\",\n        boxSizing: \"border-box\",\n    },\n    mainSearchBlock: {\n        marginBottom: \"20px\",\n    },\n    mainSearchHeader: {\n        marginBottom: \"20px\",\n    },\n    formButtonBlock: {\n        marginTop: \"15px\",\n    },\n}));\n\nexport interface SongType {\n    uuid: string\n    title: string\n    duration: number\n    createdAt: string\n    updatedAt: string\n    author: AuthorType\n}\n\nexport interface AuthorType {\n    uuid: string\n    name: string\n    label: string\n}\n\n/* Получить все песни определенного исполнителя или нескольких исполнителей.*/\n/* Получить выборку песен или исполнителей по части их названия.*/\n/* Получить выборку песен или исполнителей по дате внесения записи.*/\n/* Получить часть выборки песен или исполнителей. Например,\n    10 песен, идущих после первых 20-и от начала выборки.\n*/\n\nexport const SongPage: React.FC = () => {\n\n    const classes = useStyles();\n    const [songArray, setSongArray] = useState<Array<SongType>>([]);\n    const [authorArray, setAuthorArray] = useState<Array<AuthorResponseType>>([]);\n    const [error, setError] = useState<ErrorMessageObjectType | undefined>(undefined);\n\n    const [modalEditStatus, setModalEditStatus] = useState(false);\n\n    async function getAllSongs(queryObject?: SongQueryObjectType) {\n        try {\n            let response = await songsAPI.getAllSong(queryObject);\n            setSongArray(response.data);\n        } catch (err) {\n            showMessage(\"Nothing found\", 3000, \"error\", setError);\n            console.log('Something went wrong', err);\n        }\n    }\n\n    async function getAllAuthors() {\n        try {\n            let response = await authorsAPI.getAllAuthor()\n            setAuthorArray(response.data)\n        } catch (err) {\n            showMessage(\"Something went wrong\", 3000, \"error\", setError);\n            console.log(err);\n        }\n    }\n\n\n    useEffect(() => {\n        getAllSongs();\n        getAllAuthors();\n    }, [])\n\n    const handleSubmit = (queryObject: SongQueryObjectType) => {\n        getAllSongs(queryObject);\n    }\n\n    const handleDeleteSong = (uuid: string) => {\n        songsAPI.deleteSong(uuid)\n            .then(res => {\n                showMessage(\"Song deleted successfully\", 3000, \"success\", setError);\n                getAllSongs();\n            })\n            .catch(err => {\n                showMessage(err.response?.data?.error || \"Something went wrong\", 3000, \"error\", setError);\n                console.log('Something went wrong', err);\n            })\n    }\n\n    const handleUpdateSong = (uuid: string, updatedObject: SongUpdateObjectType) => {\n        songsAPI.updateSong(uuid, updatedObject)\n            .then(res => {\n                showMessage(\"Song updated successfully\", 3000, \"success\", setError);\n                getAllSongs();\n            })\n            .catch(err => {\n                showMessage(err.response?.data?.error || \"Something went wrong\", 3000, \"error\", setError);\n                console.log('Something went wrong', err);\n            })\n    }\n\n    const handleAddSong = (songObject: AddSongObjectType) => {\n        songsAPI.addSong(songObject)\n            .then(res => {\n                showMessage(\"Song added successfully\", 3000, \"success\", setError);\n                getAllSongs();\n            })\n            .catch(err => {\n                showMessage(err.response?.data?.error || \"Something went wrong\", 3000, \"error\", setError);\n                console.log('Something went wrong', err);\n            })\n    }\n\n    return (\n        <div className={classes.root}>\n            <Paper\n                elevation={4}\n                className={classes.paper}\n                square={false}\n            >\n                <Grid\n                    container\n                    direction=\"row\"\n                    justifyContent=\"flex-start\"\n                    alignItems=\"stretch\"\n                >\n                    <Grid\n                        item\n                        className={classes.filterBlock}\n                    >\n                        <QuerySongForm\n                            handleSubmitCallBack={handleSubmit}\n                        />\n                    </Grid>\n                    <Grid\n                        item\n                        className={classes.mainBlock}\n                    >\n                        <Grid\n                            item\n                            className={classes.mainSearchBlock}\n                            /*alignItems={\"stretch\"}*/\n                        >\n                            <Typography\n                                variant={\"h2\"}\n                                className={classes.mainSearchHeader}\n                            >\n                                List of song\n                            </Typography>\n                            <div>\n                                {\n                                    error && (\n                                        <Alert severity={error?.messageType || \"warning\"}>{error?.message}</Alert>)\n                                }\n                                <Button\n                                    variant={'contained'}\n                                    className={classes.formButtonBlock}\n                                    color={'primary'}\n                                    onClick={() => {\n                                        setModalEditStatus(true)\n                                    }}\n                                >\n                                    Add Song\n                                </Button>\n                                <ModalForm\n                                    modalTitle={\"Add song\"}\n                                    actionButtonTitle={\"Add\"}\n                                    openStatus={modalEditStatus}\n                                    handleCloseModal={setModalEditStatus}\n                                    removeActionBlock={true}\n                                >\n                                    <AddSongFormik\n                                        handleCloseModal={setModalEditStatus}\n                                        handleAddSong={handleAddSong}\n                                        authorArray={authorArray}\n                                    />\n\n                                </ModalForm>\n                            </div>\n\n                        </Grid>\n                        <Grid\n                            item\n                            /*alignItems={\"stretch\"}*/\n                        >\n                            <SongTable\n                                songArray={songArray}\n                                authorArray={authorArray}\n                                handleDeleteCallback={handleDeleteSong}\n                                handleUpdateCallback={handleUpdateSong}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Paper>\n        </div>\n    )\n}\n\nexport default SongPage","import React from 'react'\n\nconst NotFoundPage : React.FC = () => {\n    return (\n        <>\n            <h1>Not found page</h1>\n        </>\n    )\n}\nexport default NotFoundPage","import React, {useState} from 'react'\nimport {Button, TableCell, TableRow, TextField} from \"@material-ui/core\";\nimport moment from \"moment\";\nimport ModalForm from \"../common/modal/ModalForm\";\nimport {UpdateAuthorObjectType} from \"../../api/api\";\nimport {AuthorType} from \"../song/AddSongForm\";\n\nexport interface SongTableRowPropsType {\n    author: AuthorType\n    handleDeleteCallback: (uuid: string) => void\n    handleUpdateCallback: (uuid: string, updatedObject: UpdateAuthorObjectType) => void\n}\n\nexport const AuthorTableRow: React.FC<SongTableRowPropsType> = (props) => {\n    const {handleDeleteCallback, handleUpdateCallback, author} = props;\n\n    const [modalEditStatus, setModalEditStatus] = useState(false);\n    const [name, setName] = useState<string>(author.name);\n    const [label, setLabel] = useState<string>(author.label);\n\n    const handleEditAuthor = (songUuid: string) => {\n        const updatedObject: UpdateAuthorObjectType = {\n            ...(name !== '' && {\n                name\n            }),\n            ...(label !== '' && {\n                label\n            }),\n        }\n        handleUpdateCallback && handleUpdateCallback(songUuid, updatedObject);\n    }\n\n    const handleNameUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setName(event.target.value)\n    }\n    const handleLabelUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setLabel(event.target.value)\n    }\n\n    return (\n        <TableRow>\n            <TableCell component=\"th\" scope=\"row\">\n                {author.name}\n            </TableCell>\n            <TableCell align=\"right\">{author.label}</TableCell>\n            <TableCell align=\"right\">{moment(author.createdAt).format(\"DD.MM.YYYY\")}</TableCell>\n            <TableCell align=\"right\">\n                <Button\n                    type={'submit'}\n                    variant={'contained'}\n                    onClick={() => {\n                        handleDeleteCallback && handleDeleteCallback(author.uuid)\n                    }}\n                    color={'primary'}>\n                    Delete\n                </Button>\n                <Button\n                    type={'submit'}\n                    variant={'contained'}\n                    onClick={() => {\n                        setModalEditStatus(true)\n                    }}\n                    color={'primary'}>\n                    Update\n                </Button>\n                <ModalForm\n                    modalTitle={\"Edit author\"}\n                    actionButtonTitle={\"Edit\"}\n                    openStatus={modalEditStatus}\n                    handleCloseModal={setModalEditStatus}\n                    modalActionCallback={() => {\n                        handleEditAuthor(author.uuid)\n                    }}\n                >\n                    <>\n                        <TextField\n                            value={name === null ? author.name : name}\n                            onChange={handleNameUpdate}\n                            margin=\"dense\"\n                            label=\"Author name\"\n                            type=\"string\"\n                            fullWidth\n                        />\n                        <TextField\n                            value={label === null ? author.label : label}\n                            onChange={handleLabelUpdate}\n                            margin=\"dense\"\n                            label=\"Label\"\n                            type=\"string\"\n                            fullWidth\n                        />\n                    </>\n                </ModalForm>\n            </TableCell>\n        </TableRow>\n    )\n}\nexport default AuthorTableRow\n","import React from 'react';\nimport {\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n} from \"@material-ui/core\";\nimport {UpdateAuthorObjectType} from \"../../api/api\";\nimport {AuthorType} from \"../song/AddSongForm\";\nimport AuthorTableRow from \"./AuthorTableRow\";\n\nexport interface SongTablePropsType {\n    authorArray: Array<AuthorType>\n    handleDeleteCallback: (uuid: string) => void\n    handleUpdateCallback: (uuid: string, updatedObject: UpdateAuthorObjectType) => void\n}\n\nconst AuthorTable: React.FC<SongTablePropsType> = (props) => {\n\n    const {handleDeleteCallback, handleUpdateCallback, authorArray} = props;\n\n    return (\n        <TableContainer component={Paper}>\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Author name</TableCell>\n                        <TableCell align=\"right\">Label</TableCell>\n                        <TableCell align=\"right\">CreatedAt</TableCell>\n                        <TableCell align=\"right\">Action</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {authorArray.map((author) => (\n                        <AuthorTableRow\n                            key={author.uuid}\n                            author={author}\n                            handleDeleteCallback={handleDeleteCallback}\n                            handleUpdateCallback={handleUpdateCallback}\n                        />\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\nexport default AuthorTable;","import React, { useState} from 'react';\nimport {makeStyles, createStyles, Theme} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {Button, FormControl, Input, InputLabel, MenuItem, Select} from \"@material-ui/core\";\nimport {muiTheme} from \"../common/theme/theme\";\nimport { QueryAuthorsObjectType} from \"../../api/api\";\nimport {AuthorType} from \"../pages/AuthorPage\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        rootGrid: {\n            flexGrow: 1,\n        },\n        formButtonBlock: {\n            display: \"flex\",\n            alignItems: \"center\",\n        },\n        filterHeader: {\n            marginBottom: \"20px\",\n        },\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n            maxWidth: 190,\n        },\n        search: {\n            display: \"flex\",\n            alignItems: \"stretch\",\n            backgroundColor: \"#e2dfef\",\n            marginBottom: \"15px\",\n        },\n        searchInputBlock: {\n            flexDirection: \"column\",\n            flexGrow: 3,\n        },\n        addDeckBlock: {\n            marginLeft: \"20px\",\n        }\n    }),\n);\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 190,\n        },\n    },\n};\n\nfunction getStyles(name: string, personName: string[], theme: Theme) {\n    return {\n        fontWeight:\n            personName.indexOf(name) === -1\n                ? theme.typography.fontWeightRegular\n                : theme.typography.fontWeightMedium,\n    };\n}\n\nexport interface QueryAuthorFormPropsType {\n    authorArray: Array<AuthorType>\n    handleSubmitCallBack: (songQueryObject: QueryAuthorsObjectType) => void\n}\n\nexport const QueryAuthorForm: React.FC<QueryAuthorFormPropsType> = (props) => {\n\n    const {handleSubmitCallBack, authorArray} = props\n\n    const classes = useStyles();\n\n    const [createdAt, setCreatedAt] = React.useState<string>('');\n    const [authorName, setAuthorName] = useState<string>('');\n    const [offset, setOffset] = useState<string>('');\n    const [limit, setLimit] = useState<string>('');\n    const [checkedAuthorList, setCheckedAuthorList] = useState<Array<string>>([]);\n\n    const handleAuthorNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setAuthorName(event.target.value)\n    }\n    const handleCreatedAt = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCreatedAt(event.target.value);\n    };\n    const handleOffset = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let value = event.target.value\n        setOffset(value);\n    }\n    const handleLimit = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let value = event.target.value\n        setLimit(value)\n    }\n\n    const handleAuthorListChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setCheckedAuthorList(event.target.value as string[]);\n\n    };\n\n    const handleSubmit = () => {\n        const querySongObject: QueryAuthorsObjectType = {\n            params: {\n                ...(authorName !== '' && {\n                    authorName\n                }),\n                ...((limit !== '' && isFinite(+limit)) && {\n                    limit: Number(limit)\n                }),\n                ...((offset !== '' && isFinite(+offset)) && {\n                    offset: Number(offset)\n                }),\n                ...(createdAt !== '' && {\n                    createdAtSong: createdAt\n                }),\n                ...(checkedAuthorList.length > 0 && {\n                    authorList: checkedAuthorList\n                }),\n            }\n        }\n        handleSubmitCallBack && handleSubmitCallBack(querySongObject);\n    }\n\n    return (\n        <div>\n            <Grid\n                container\n                direction=\"row\"\n                justifyContent=\"flex-start\"\n                alignItems=\"stretch\"\n            >\n                <Grid\n                    item\n                    className={classes.searchInputBlock}\n                >\n                    <Typography\n                        variant={\"h2\"}\n                        className={classes.filterHeader}\n                    >\n                        Filter authors\n                    </Typography>\n                    <TextField\n                        value={authorName}\n                        size={\"small\"}\n                        className={classes.search}\n                        style={{backgroundColor: \"#ECECF9\"}}\n                        label=\"Author name\"\n                        placeholder=\"Song name\"\n                        variant=\"outlined\"\n                        onChange={handleAuthorNameChange}\n                    />\n                    <TextField\n                        value={offset}\n                        size={\"small\"}\n                        className={classes.search}\n                        style={{backgroundColor: \"#ECECF9\"}}\n                        label=\"Offset\"\n                        placeholder=\"offset\"\n                        variant=\"outlined\"\n                        onChange={handleOffset}\n                    />\n                    <TextField\n                        value={limit}\n                        size={\"small\"}\n                        className={classes.search}\n                        style={{backgroundColor: \"#ECECF9\"}}\n                        label=\"set limit\"\n                        placeholder=\"set limit\"\n                        variant=\"outlined\"\n                        onChange={handleLimit}\n                    />\n                    <TextField\n                        value={createdAt}\n                        size={\"small\"}\n                        className={classes.search}\n                        style={{backgroundColor: \"#ECECF9\"}}\n                        label=\"createdAt\"\n                        type=\"date\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        onChange={handleCreatedAt}\n                    />\n                    <FormControl className={classes.formControl}>\n                        <InputLabel id=\"demo-mutiple-name-label\">Name</InputLabel>\n                        <Select\n                            labelId=\"demo-mutiple-name-label\"\n                            id=\"demo-mutiple-name\"\n                            multiple\n                            value={checkedAuthorList}\n                            onChange={handleAuthorListChange}\n                            input={<Input/>}\n                            MenuProps={MenuProps}\n                        >\n                            {authorArray.map((author) => (\n                                <MenuItem\n                                    key={author.uuid}\n                                    value={author.uuid}\n                                    style={getStyles(author.name, checkedAuthorList, muiTheme)}\n                                >\n                                    {author.name}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                    <Button\n                        type={'submit'}\n                        variant={'contained'}\n                        className={classes.formButtonBlock}\n                        color={'primary'}\n                        onClick={handleSubmit}\n                    >\n                        Search\n                    </Button>\n                </Grid>\n            </Grid>\n        </div>\n    );\n};\n","import React from 'react'\nimport {useFormik} from \"formik\";\nimport * as Yup from 'yup';\nimport {\n    Button, createStyles, FormControl, FormGroup,\n    Grid, makeStyles, TextField, Theme,\n} from \"@material-ui/core\";\nimport { NewAuthorObjectType} from \"../../api/api\";\n\n\nconst useStyles = makeStyles<Theme>(theme => createStyles({\n    root: {\n        textAlign: \"center\",\n        padding: \"30px 30px\",\n        width: \"413px\",\n    },\n    formTitle: {\n        marginBottom: \"30px\",\n    },\n    formSubtitle: {\n        marginBottom: \"40px\",\n    },\n    formDescription: {\n        marginBottom: \"40px\",\n    },\n    formButtonBlock: {\n        marginTop: \"15px\",\n    },\n    textFieldArea: {\n        margin: \"0px 10px\",\n        display: \"flex\"\n    },\n    addAuthorField: {\n        flexGrow: 1,\n    },\n    displayStretch: {\n        display: \"flex\",\n        alignItems: \"stretch\"\n    },\n}))\n\nexport interface AddAuthorFormPropsType {\n    handleAddAuthor: (authorObject: NewAuthorObjectType) => void\n    handleCloseModal?: (openStatus: boolean) => void\n}\n\nconst AddAuthorForm: React.FC<AddAuthorFormPropsType> = (props) => {\n    const {handleAddAuthor, handleCloseModal} = props;\n    const classes = useStyles()\n\n    const restoreSchema = Yup.object().shape({\n        name: Yup.string().required('Name is required'),\n        label: Yup.string(),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            name: '',\n            label: '',\n        },\n        validationSchema: restoreSchema,\n        onSubmit: (values) => {\n            const authorObject: NewAuthorObjectType = {\n                name: values.name,\n                label: values.label\n            }\n            handleCloseModal && handleCloseModal(false);\n            handleAddAuthor && handleAddAuthor(authorObject);\n            formik.resetForm();\n        },\n    })\n\n    return (\n        <Grid>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl className={classes.displayStretch}>\n                    <FormGroup className={classes.textFieldArea}>\n                            <TextField\n                                type=\"text\"\n                                label=\"Name\"\n                                margin=\"dense\"\n                                {...formik.getFieldProps('name')}\n                            />\n                            {formik.touched.name && formik.errors.name &&\n                            <div style={{color: 'red'}}>{formik.errors.name}</div>\n                            }\n                            <TextField\n                                type=\"text\"\n                                label=\"Label\"\n                                margin=\"dense\"\n                                {...formik.getFieldProps('label')}\n                            />\n                            {formik.touched.label && formik.errors.label &&\n                            <div style={{color: 'red'}}>{formik.errors.label}</div>\n                            }\n                            <div className={classes.formButtonBlock}>\n                                <Button\n                                    type={'submit'}\n                                    variant={'contained'}\n                                    className={classes.formButtonBlock}\n                                    color={'primary'}>\n                                    Add Author\n                                </Button>\n                            </div>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    )\n}\nexport default AddAuthorForm\n","import React, {useEffect, useState} from 'react';\nimport {AuthorType as AuthorResponseType} from \"../song/AddSongForm\";\nimport {\n    authorsAPI, NewAuthorObjectType,\n    QueryAuthorsObjectType,\n    UpdateAuthorObjectType\n} from \"../../api/api\";\nimport {makeStyles} from '@material-ui/core/styles';\nimport {Button, Paper} from \"@material-ui/core\";\nimport Grid from '@material-ui/core/Grid';\nimport Typography from \"@material-ui/core/Typography\";\nimport AuthorTable from \"../author/AuthorTable\";\nimport {QueryAuthorForm} from \"../author/QueryAuthorForm\";\nimport AddAuthorForm from \"../author/AddAuthorForm\";\nimport {Alert} from \"@material-ui/lab\";\nimport {ErrorMessageObjectType, showMessage} from \"../utils/helper\";\nimport ModalForm from \"../common/modal/ModalForm\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        marginTop: \"40px\",\n        marginBottom: \"40px\",\n        minWidth: 750,\n    },\n    paper: {\n        margin: 'auto',\n        maxWidth: 1200,\n    },\n    filterBlock: {\n        backgroundColor: \"#ECECF9\",\n        maxWidth: \"250px\",\n        padding: \"30px\",\n        flexGrow: 1,\n    },\n    mainBlock: {\n        width: \"fit-content\",\n        flexGrow: 3,\n        margin: \"30px\",\n        maxWidth: \"950px\",\n        boxSizing: \"border-box\",\n    },\n    mainSearchBlock: {\n        marginBottom: \"20px\",\n    },\n    mainSearchHeader: {\n        marginBottom: \"20px\",\n    },\n    formButtonBlock: {\n        marginTop: \"15px\",\n    },\n}));\n\nexport interface SongType {\n    uuid: string\n    title: string\n    duration: number\n    createdAt: string\n    updatedAt: string\n    author: AuthorType\n}\n\nexport interface AuthorType {\n    uuid: string\n    name: string\n    label: string\n}\n\n/* Получить все песни определенного исполнителя или нескольких исполнителей.*/\n/* Получить выборку песен или исполнителей по части их названия.*/\n/* Получить выборку песен или исполнителей по дате внесения записи.*/\n/* Получить часть выборки песен или исполнителей. Например,\n    10 песен, идущих после первых 20-и от начала выборки.\n*/\n\nconst AuthorPage: React.FC = () => {\n\n    const classes = useStyles();\n    const [authorArray, setAuthorArray] = useState<Array<AuthorResponseType>>([]);\n    const [error, setError] = useState<ErrorMessageObjectType | undefined>(undefined)\n\n    const [modalEditStatus, setModalEditStatus] = useState(false);\n\n    async function getAllAuthors(queryObject?: QueryAuthorsObjectType) {\n        try {\n            let response = await authorsAPI.getAllAuthor(queryObject)\n            setAuthorArray(response.data)\n        } catch (err) {\n            showMessage(\"Nothing found\", 3000, \"error\", setError);\n            console.log(err);\n        }\n    }\n\n\n    useEffect(() => {\n        getAllAuthors();\n    }, [])\n\n    const handleSearch = (queryObject: QueryAuthorsObjectType) => {\n        getAllAuthors(queryObject);\n    }\n\n    const handleDeleteAuthor = (uuid: string) => {\n        authorsAPI.deleteAuthor(uuid)\n            .then(res => {\n                showMessage(\"Author deleted\", 3000, \"success\", setError);\n                getAllAuthors();\n            })\n            .catch(err => {\n                showMessage(\"Something went wrong\", 3000, \"error\", setError);\n                console.log('Something went wrong', err);\n            })\n    }\n\n    const handleUpdateAuthor = (uuid: string, updatedObject: UpdateAuthorObjectType) => {\n        authorsAPI.updateAuthor(uuid, updatedObject)\n            .then(res => {\n                showMessage(\"Author updated\", 3000, \"success\", setError);\n                getAllAuthors();\n            })\n            .catch(err => {\n                showMessage(\"Something went wrong\", 3000, \"error\", setError);\n                console.log('Something went wrong', err);\n            })\n    }\n\n    const handleAddAuthor = (authorObject: NewAuthorObjectType) => {\n        authorsAPI.addAuthor(authorObject)\n            .then(res => {\n                showMessage(\"Author added\", 3000, \"success\", setError);\n                getAllAuthors();\n            })\n            .catch(err => {\n                showMessage(err.response?.data?.error || \"Something went wrong\", 3000, \"error\", setError);\n                console.log('Something went wrong', err);\n            })\n    }\n\n    return (\n        <div className={classes.root}>\n            <Paper\n                elevation={4}\n                className={classes.paper}\n                square={false}\n            >\n                <Grid\n                    container\n                    direction=\"row\"\n                    justifyContent=\"flex-start\"\n                    alignItems=\"stretch\"\n                >\n                    <Grid\n                        item\n                        className={classes.filterBlock}\n                    >\n                        <QueryAuthorForm\n                            authorArray={authorArray}\n                            handleSubmitCallBack={handleSearch}\n                        />\n                    </Grid>\n                    <Grid\n                        item\n                        className={classes.mainBlock}\n                    >\n                        <Grid\n                            item\n                            className={classes.mainSearchBlock}\n                            /*alignItems={\"stretch\"}*/\n                        >\n                            <Typography\n                                variant={\"h2\"}\n                                className={classes.mainSearchHeader}\n                            >\n                                Author Page\n                            </Typography>\n                            <div>\n                                {\n                                    error && (\n                                        <Alert severity={error?.messageType || \"warning\"}>{error?.message}</Alert>)\n                                }\n                                <Button\n                                    variant={'contained'}\n                                    className={classes.formButtonBlock}\n                                    color={'primary'}\n                                    onClick={() => {\n                                        setModalEditStatus(true)\n                                    }}\n                                >\n                                    Add Author\n                                </Button>\n                                <ModalForm\n                                    modalTitle={\"Add author\"}\n                                    actionButtonTitle={\"Add\"}\n                                    openStatus={modalEditStatus}\n                                    handleCloseModal={setModalEditStatus}\n                                    removeActionBlock={true}\n                                    modalActionCallback={() => {\n                                        /*handleAddAuthor();*/\n                                        /*handleEditAuthor(author.uuid)*/\n                                    }}\n                                >\n                                    <AddAuthorForm\n                                        handleCloseModal={setModalEditStatus}\n                                        handleAddAuthor={handleAddAuthor}\n                                    />\n                                    {/*</AddAuthorForm>*/}\n                                </ModalForm>\n                            </div>\n                        </Grid>\n                        <Grid\n                            item\n                            /*alignItems={\"stretch\"}*/\n                        >\n                            <AuthorTable\n                                authorArray={authorArray}\n                                handleDeleteCallback={handleDeleteAuthor}\n                                handleUpdateCallback={handleUpdateAuthor}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Paper>\n        </div>\n    )\n}\n\nexport default AuthorPage","import React from 'react'\nimport {Redirect, Switch, Route} from 'react-router-dom'\nimport {SongPage} from \"../pages/SongPage\";\nimport NotFoundPage from \"../pages/NotFoundPage\";\nimport AuthorPage from \"../pages/AuthorPage\";\n\nexport const PATH = {\n    ALL_ROUTES: '*',\n    SONGS: '/songs',\n    AUTHORS: '/authors',\n    NOTFOUND: '/404',\n};\n\nconst Routes: React.FC = () => {\n\n    return (\n        <div>\n            <Switch>\n                <Route path={PATH.SONGS} render={() => <SongPage/>}/>\n                <Route path={PATH.AUTHORS} render={() => <AuthorPage/>}/>\n                <Route path={PATH.NOTFOUND} render={() => <NotFoundPage/>}/>\n                <Route path={'/'} exact render={() => <AuthorPage/>}/>\n                {/*<Route path={PATH.SONGS + '/:id'} exact={true} component={DestinationProfileContainer} />*/}\n                <Redirect from={PATH.ALL_ROUTES} to={PATH.NOTFOUND}/>\n            </Switch>\n        </div>\n    );\n};\n\nexport default Routes\n","import React from 'react';\nimport { useHistory} from 'react-router-dom';\nimport {\n    AppBar,\n    Button, createStyles,\n    makeStyles,\n    Theme,\n    Toolbar,\n    Typography\n} from \"@material-ui/core\";\nimport {PATH} from \"../router/Routes\";\n\nconst useStyles = makeStyles<Theme>(theme => createStyles({\n    root: {\n        backgroundColor: \"#EBE0E9\",\n    },\n    toolbar :  {\n       display : \"flex\",\n       justifyContent : \"space-between\",\n    },\n    listBlock: {\n        display: \"flex\",\n        flexDirection: \"row\"\n    },\n    iconBlock: {},\n    menuItem: {\n        color: \"#2D2E46\",\n    }\n}))\n\nconst Header: React.FC = () => {\n    const history = useHistory()\n    const classes = useStyles()\n\n    return (\n        <div>\n            <AppBar\n                position=\"static\"\n                className={classes.root}\n            >\n                <Toolbar className={classes.toolbar}>\n                    <Typography variant=\"h1\">\n                        Codex Test\n                    </Typography>\n                    <div>\n                        <Button\n                            color=\"inherit\"\n                            className={classes.menuItem}\n                            onClick={() => history.push(PATH.SONGS)}\n                        >Songs</Button>\n\n                        <Button\n                            color=\"inherit\"\n                            className={classes.menuItem}\n                            onClick={() => history.push(PATH.AUTHORS)}\n                        >Authors</Button>\n                    </div>\n                </Toolbar>\n                {/*{appStatus === 'loading' && <LinearProgress color={\"secondary\"}/>}*/}\n            </AppBar>\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react';\nimport './App.css';\nimport Header from \"./component/header/Header\";\nimport Routes from \"./component/router/Routes\";\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <Header/>\n        <Routes/>\n      </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {CssBaseline, MuiThemeProvider} from \"@material-ui/core\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {muiTheme} from \"./component/common/theme/theme\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <MuiThemeProvider theme={muiTheme}>\n        <CssBaseline/>\n        {/*<Provider store={store}>*/}\n            {/*<HashRouter>*/}\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n            {/*</HashRouter>*/}\n        {/*</Provider>*/}\n        </MuiThemeProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}